<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
   
   	<title>ianwootten.co.uk - Tag: js</title>
   
   <link>http://ianwootten.co.uk</link>
   <description>I'm a Web Developer  working at <a href="http://niftydigits.com">Nifty Digits</a> in Cardiff, UK. Here, I enjoy talking code - mostly javascript. I'm <a href="http://twitter.com/iwootten">@iwootten</a> on twitter.</description>
   <language>en-us</language>
   <managingEditor>I.M.Wootten</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />

    
	  <item>
        <title>Why I Choose Popular Frameworks</title>
        <link>http://ianwootten.co.uk/2013/01/04/why-i-choose-popular-frameworks</link>
		<author>I.M.Wootten<</author>
		<pubDate>2013-01-04T00:00:00+00:00</pubDate>
		<guid>http://ianwootten.co.uk/2013/01/04/why-i-choose-popular-frameworks</guid>
		<description><![CDATA[
		   <p>I feel compelled to write this post so late in the day after clocking <a href="https://gist.github.com/4454814">Tyler Renelle’s rant</a> on github about his problems with the popularity of certain JS frameworks (in the main <a href="http://backbonejs.org">Backbone.js</a>). After having written apps in a variety of JS frameworks (Backbone, Spine and Meteor), I’ve learned that the feature set of a framework is not the only thing I hold dear when making a choice between them.</p>

<p>Documentation, support, learning curve and most importantly community are what also guide me when building anything. If I need to make an app quickly, I’ll of course develop it in my favourite tool (Backbone), because I’ve been using it for years and therefore doesn’t hold a cost. If I have a problem, I know there’s a ton of hackers who’ve probably already worked on solutions already and mechanisms are in place for them to offer advice. There may be better documented more capable tools, but I can’t foot the expense in the short term that might come with investigating something new and run the risk of hitting problems I can’t solve. In the long term, as a framework grows in popularity and garners these other factors then I may make that jump. </p>

<p>The real reason these frameworks are popular right now is in part because they are already popular.</p>


		]]></description>
	  </item>
    
	  <item>
        <title>Oh Crap, I&#8217;m a Frontend Developer</title>
        <link>http://ianwootten.co.uk/2012/11/23/oh-crap-im-a-frontend-developer</link>
		<author>I.M.Wootten<</author>
		<pubDate>2012-11-23T00:00:00+00:00</pubDate>
		<guid>http://ianwootten.co.uk/2012/11/23/oh-crap-im-a-frontend-developer</guid>
		<description><![CDATA[
		   <p>When I was first tiptoeing in the waters of web development (early 2000′s), getting a grips on job descriptions was simple. There were 2 types of people in our industry: designers or developers. You either drew websites, or you built websites – that was it.</p>

<p>As time went on people seemed to invent new titles: “UX Designers” were the first to appear on the scene to me, and <a href="http://adactio.com/journal/1596">we’re still to this day figuring out what this role really entails</a>. The one that particularly got my hair up though was a “Frontend Developer”. Basically, going from the skills that were listed with these roles (HTML, CSS, JS) it was a designer who could also do a bit of jQuery…. Not a real developer then. Not someone who pokes around with backend scripts and really knows what’s going on, right? Someone who can properly structure apps and create proper object oriented classes. It got my hair up because it seemed like an attempt to poach credentials from us hardworking devs. How dare they. Losers.</p>

<p>Time passed…. I got a real job….. The industry invented more job titles….</p>

<p>My first role was as a PHP/MySQL developer. I also started having to make decisions on frontend design and behaviour without having a formal education in either. I was, in my own projects at least, the only person to do such work. Outside of work during my first job, I decided to play with two hot technologies at the time: CouchDB and node.js. I geeked out about both, using document based stores and Javascript server-side – but hated the steep learning curve that came with having to use JS. It also missed many of the constructs I’d become used to in other languages.</p>

<p>I’d seen a great deal of realtime apps and knew behaviour in my own apps should be keeping up. What I had could be better, much better. It was about here I probably started appreciating how much work was involved in a typical browser based app. I started using <a href="http://backbonejs.org">backbone.js</a> with a view to better organising the mess of JS that typically sat next to my markup. There wasn’t a great deal of help around, so I read a book as an aide….. I had to properly approach what was going on in the browser as I would do any other software. Hmm, weird. JS in the browser had up until now, been an afterthought to “jazz stuff up”. Developing real, well designed software in the browser however really floated my boat. I prototyped a simple calendar app and it worked fantastically well.</p>

<p>Since then, I’ve been lucky enough to move into a full time contract role as a Javascript Developer – or a Frontend Web Developer, if you like. I probably would have been shocked had someone suggested this 5 or so years ago.</p>

<p>I’m really enjoying being part of the community around JS, the ever increasing list of libraries being posted and patterns for development. Hopefully I’ve learnt to be a little more discerning of job titles than I have been in the past.</p>


		]]></description>
	  </item>
    
  </channel>
</rss>