<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
   
   	<title>ianwootten.co.uk - Tag: pygments</title>
   
   <link>http://ianwootten.co.uk</link>
   <description>I'm a Web Developer  working at <a href="http://niftydigits.com">Nifty Digits</a> in Cardiff, UK. Here, I enjoy talking code - mostly javascript. I'm <a href="http://twitter.com/iwootten">@iwootten</a> on twitter.</description>
   <language>en-us</language>
   <managingEditor>I.M.Wootten</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />

    
	  <item>
        <title>Porting a Wordpress blog to Jekyll: Part 1</title>
        <link>http://ianwootten.co.uk/2014/05/20/porting-a-wordpress-blog-to-jekyll-part-1</link>
		<author>I.M.Wootten<</author>
		<pubDate>2014-05-20T00:00:00+01:00</pubDate>
		<guid>http://ianwootten.co.uk/2014/05/20/porting-a-wordpress-blog-to-jekyll-part-1</guid>
		<description><![CDATA[
		   <p>As my last post indicated, I recently made the decision to leave wordpress for jekyll for my blogging software of choice. There were a number of hurdles I had to overcome in order to get to a state I was happy with, emulating my previous blog structure. This first post details a few of the setup problems and how I’ve overcome them.</p>

<h2 id="using-compass-for-a-jekyll-theme">Using Compass for a Jekyll theme</h2>

<p>The first problem I hit was my use of compass to create parts of the theme I intended to use for my blog. When attempting to use <a href="https://github.com/mscharley/jekyll-compass">jekyll-compass</a> to enable that, I hit the following error:</p>

<div class="highlight"><pre><code class="bash">Unable to activate compass-0.12.6, because sass-3.3.7 conflicts with sass <span class="o">(</span>~&gt; 3.2.19<span class="o">)</span> <span class="o">(</span>Gem::LoadError<span class="o">)</span></code></pre></div>

<p>After searching for a bit I came across the <a href="https://github.com/jekyll/jekyll/issues/2263">following issue</a> which detailed a solution - but unfortunately it didn’t work for me. Being somewhat of a newbie to Ruby, I didn’t realise that after creating a Gem as instructed in the fix, I actually needed to “bundle install” it. After a little more digging and tweaking against <a href="http://twitter.com/markturner">Mark Turners</a> advice, I ended up with a Gem file like so:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>

<span class="n">gem</span> <span class="s1">&#39;sass&#39;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 3.2.19&quot;</span>
<span class="n">gem</span> <span class="s1">&#39;jekyll-compass&#39;</span><span class="p">,</span> <span class="s2">&quot;1.0.6&quot;</span></code></pre></div>

<p>Which has finally given me what I wanted.</p>

<h2 id="using-custom-pygments-themes-for-syntax-highlighting">Using Custom Pygments Themes for Syntax highlighting</h2>

<p>Jekyll uses pygments for fancy pants syntax highlighting. Although an example syntax.css is linked to in the jekyll documentation, I prefer a darker theme myself. Jekyll doesn’t tell you it’s possible to generate any one of the numerous pygments styles like this:</p>

<div class="highlight"><pre><code class="bash">pygmentize -f html -S monokai -a .highlight &gt; monokai.css</code></pre></div>

<p>I’ve used the monokai theme for my own highlighting. There are demos of each of the themes on the pygments site - <a href="http://pygments.org/demo/357593/">here is an example</a>. You can then use that as the basis for your own custom highlighting. I’ve created each one of the 19 possible themes and <a href="https://github.com/iwootten/jekyll-syntax">put them up on github</a>.</p>

<h2 id="moving-to-disqus-commenting">Moving to Disqus Commenting</h2>

<p>Given I now had a static site, I needed a means of continuing supporting comments. Disqus does just that by embedding comments using javascript into post pages. Adding disqus  proved to be the biggest hurdle for me. I had a large number of comments from people on my blog over the years and therefore I didn’t want to lose them. After exporting my site as xml and uploading them to disqus, I finally set jekyll loose on my site along with disqus embeds, but I couldn’t see them. The problem I found after a frustrating hour or two of uploading new versions of my site over ftp, was jekyll used a trailing slash (as the post is an index within a directory) to denote links to posts. It’s possible however to do away with this using .htaccess if you’re using Apache.</p>

<div class="highlight"><pre><code class="apache"><span class="nb">Options</span> -Multiviews +FollowSymLinks
<span class="nb">RewriteEngine</span> <span class="k">On</span>
<span class="nb">RewriteBase</span> /
<span class="nb">DirectorySlash</span> <span class="k">Off</span>

<span class="c"># remove the trailing slash</span>
<span class="nb">RewriteRule</span> ^(.*)\/(\?.*)?$ $1$2 [R=301,L]

<span class="c"># rewrite /dir/file to /dir/file/index.html</span>
<span class="nb">RewriteRule</span> ^([\w\/-]+)(\?.*)?$ $1/index.html$2 [L,T=application/x-httpd-html]</code></pre></div>

<p>However, when I began using github pages, this fix didn’t work as github only serves static files and doesn’t allow use of htaccess. Instead, I had to resign to the fact that I would have to have trailing slashes (apparently they’re quicker anyway). This then meant I had to use the Redirect Crawler option of disqus’s “Migrate Threads” wizard (seen below) to crawl my new blog on github and determine where the posts were now located.</p>

<p><img src="http://ianwootten.co.uk/images/screen-2014-05-20.png" title="Disqus Migrate Threads Wizard" /></p>

<p>In my next post I’ll go through how I use plugins to support archive, category and tag pages in jekyll.</p>

		]]></description>
	  </item>
    
  </channel>
</rss>