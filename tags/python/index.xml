<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Ian Wootten</title>
    <link>https://www.ianwootten.co.uk/tags/python/</link>
    <description>Recent content in python on Ian Wootten</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Jun 2021 09:54:37 +0100</lastBuildDate><atom:link href="https://www.ianwootten.co.uk/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build Your Own Pico Powered Midi Controller for $35</title>
      <link>https://www.ianwootten.co.uk/2021/06/08/build-your-own-pico-powered-midi-controller-for-35/</link>
      <pubDate>Tue, 08 Jun 2021 09:54:37 +0100</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2021/06/08/build-your-own-pico-powered-midi-controller-for-35/</guid>
      <description>Find the video of this article on youtube
The Launchpad is a midi controller used for audio production with digital audio workstations (or DAWs) like Ableton. In comes in mini and standard forms and features 64 pads, along with 16 additional buttons ready to map to your application of choice. The mini version starts at £75, the standard is £145 and there&amp;rsquo;s an older &amp;ldquo;Pro&amp;rdquo; which is currently available for £179.</description>
    </item>
    
    <item>
      <title>Installing Module Extras with Pipenv and Poetry</title>
      <link>https://www.ianwootten.co.uk/2021/04/07/installing-module-extras-with-pipenv-and-poetry/</link>
      <pubDate>Wed, 07 Apr 2021 17:13:00 +0100</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2021/04/07/installing-module-extras-with-pipenv-and-poetry/</guid>
      <description>I thought it worth documenting how to install &amp;ldquo;extra&amp;rdquo; dependencies in Pipenv and Poetry after struggling to find the answer myself. Context: I hit a problem with uvicorn where the websockets module hadn&amp;rsquo;t been installed as a result of not including the &amp;ldquo;standard&amp;rdquo; extras. Rather than return an error, it just failed to connect the websocket which made me think something was wrong with my network configuration.
As an example, take the following pip command:</description>
    </item>
    
    <item>
      <title>Building a Cookiecutter Template for Multiple Python Package Managers</title>
      <link>https://www.ianwootten.co.uk/2021/01/25/building-a-cookiecutter-template-for-multiple-python-package-managers/</link>
      <pubDate>Mon, 25 Jan 2021 14:21:21 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2021/01/25/building-a-cookiecutter-template-for-multiple-python-package-managers/</guid>
      <description>In my previous post, I described how you can use Python and Makefiles to quickly get new projects started. In this post I explore how you can use cookiecutters more advanced Jinja templating techniques to make a cookiecutter that can be used for multiple package managers. Specifically, we&amp;rsquo;ll be extending the existing template to build another that can be used with either Poetry or Pipenv.
Our New Cookiecutter Template As a reminder, Cookiecutter allows us to template project and directory content and structure using Jinja2 logic.</description>
    </item>
    
    <item>
      <title>Bootstrapping Python Projects with Cookiecutter and Makefiles</title>
      <link>https://www.ianwootten.co.uk/2021/01/07/bootstrapping-python-projects-with-cookiecutter-and-makefiles/</link>
      <pubDate>Thu, 07 Jan 2021 15:57:34 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2021/01/07/bootstrapping-python-projects-with-cookiecutter-and-makefiles/</guid>
      <description>When starting a new project, it’s easy to get caught up in the excitement of starting the shiny new thing and forget about some basics. What starts out as a script slowly evolves into an application and before long you’ll find yourself repeating common steps for every project to get it to match personal preferences. If you happen to be working within on a team, you may have many repositories that should have the same setup and inconsistencies between them can quickly lead to large amounts of lost time to get them aligned.</description>
    </item>
    
    <item>
      <title>What is a PEP and why should I care?</title>
      <link>https://www.ianwootten.co.uk/2020/11/16/what-is-a-pep-and-why-should-i-care/</link>
      <pubDate>Mon, 16 Nov 2020 15:15:34 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2020/11/16/what-is-a-pep-and-why-should-i-care/</guid>
      <description>No doubt if you&amp;rsquo;ve been developing in Python for any length of time, you will have heard the acronym &amp;ldquo;PEP&amp;rdquo; mentioned quite frequently. More often than not you hear it when talking about Python code style, usually followed by the number &amp;ldquo;8&amp;rdquo;. So what is a PEP and why should you care?
What is a PEP? PEP stands for &amp;ldquo;Python Enhancement Proposal&amp;rdquo;. They are used to describe and summarise the technical design and reasons for enhancements to Python and surrounding processes.</description>
    </item>
    
    <item>
      <title>Interesting Features in Python 3.9</title>
      <link>https://www.ianwootten.co.uk/2020/11/05/interesting-features-in-python-3.9/</link>
      <pubDate>Thu, 05 Nov 2020 13:57:34 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2020/11/05/interesting-features-in-python-3.9/</guid>
      <description>Here&amp;rsquo;s some features I found interesting in the release of Python 3.9 last month. You can see me talk about each of these in my latest video on youtube.
Full Release Notes
Merging and Updating Dictionaries PEP 584 - Dictionaries now have new union operators to work with them.
Python 3.8:
x = {&amp;#39;key&amp;#39;: &amp;#39;original_value&amp;#39;} y = {&amp;#39;key&amp;#39;: &amp;#39;updated_value&amp;#39;} print({**x, **y}) # Python 3.8 unpacking, kind of confusing Python 3.9:</description>
    </item>
    
    <item>
      <title>Use Black to Format Python and get on with Your Life</title>
      <link>https://www.ianwootten.co.uk/2020/11/03/use-black-to-format-python-and-get-on-with-your-life/</link>
      <pubDate>Tue, 03 Nov 2020 15:35:34 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2020/11/03/use-black-to-format-python-and-get-on-with-your-life/</guid>
      <description>When I first started working in software development teams, I can remember heated discussions on pull requests on a few occasions. Typically these were when I or other developers reviewed code that didn&amp;rsquo;t meet formatting rules that were felt best for that piece of work. It didn&amp;rsquo;t matter whether the rules in question were in code, documented in a README or just held in a developers head, the simple fact that something was wrong on the project meant the author needed to make changes, be severely reprimanded and never make the mistake again.</description>
    </item>
    
    <item>
      <title>How to Deploy a Django App to the DigitalOcean App Platform</title>
      <link>https://www.ianwootten.co.uk/2020/10/28/how-to-deploy-a-django-app-to-the-digitalocean-app-platform/</link>
      <pubDate>Wed, 28 Oct 2020 10:13:59 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2020/10/28/how-to-deploy-a-django-app-to-the-digitalocean-app-platform/</guid>
      <description>Digitalocean recently launched their App platform, a platform as a service (PaaS) which can be seen as a competitor to the likes of Heroku. As a Python developer, I wanted to see how easy it was to deploy a django app to App platform. It took me a little while to configure everything correctly so I thought I&amp;rsquo;d go through some of the points that tripped me up here.
I&amp;rsquo;ve been looking for some time for a relatively simple method for deploying my projects, but I also want to use a pattern where my repo is the primary source of truth for my app.</description>
    </item>
    
    <item>
      <title>Publishing to PyPI Using Github Actions</title>
      <link>https://www.ianwootten.co.uk/2020/10/23/publishing-to-pypi-using-github-actions/</link>
      <pubDate>Fri, 23 Oct 2020 10:00:19 +0100</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2020/10/23/publishing-to-pypi-using-github-actions/</guid>
      <description>In creating my first package on PyPI, I realised that many of the tasks I&amp;rsquo;d want to do on a subsequent publish would be repetitive. If I wanted to push out a simple fix, I wanted to automate away those tasks so I could focus on my code rather than a sequence of repetitive steps.
Github actions is a simple way to do this and has given me the ability to quickly push out changes without lots of manual work.</description>
    </item>
    
    <item>
      <title>Publishing a Package to PyPI with Poetry</title>
      <link>https://www.ianwootten.co.uk/2020/10/20/publishing-a-package-to-pypi-with-poetry/</link>
      <pubDate>Tue, 20 Oct 2020 10:04:11 +0100</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2020/10/20/publishing-a-package-to-pypi-with-poetry/</guid>
      <description>I recently published my first ever package to the Python Package Index (PyPI). The process was particularly novel for me as it meant my first ever use of the Poetry package management tool. If you happen to work in a production studio that uses ftrack and is now working remotely, you might even want to take a look at it as it enables sharing of assets using the Simple Storage Service (S3) from Amazon Web Services.</description>
    </item>
    
    <item>
      <title>My Web Development Stack in 2018</title>
      <link>https://www.ianwootten.co.uk/2018/11/07/my-web-development-stack-in-2018/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2018/11/07/my-web-development-stack-in-2018/</guid>
      <description>Over my time as a web developer, I’ve jumped between many frameworks and languages, attempting to find ones that work well for me. This seems to be pretty typical for developers who always have a take on the latest trend, either to quickly adopt or criticise it.
I really wanted to be a member of the Ruby crew for a time and ended up buying multiple copies of “Agile Web Development with Rails”, before having the opportunity to really apply it to a project and disposing of them because the material was outdated.</description>
    </item>
    
    <item>
      <title>User Generated Forms with WTForms</title>
      <link>https://www.ianwootten.co.uk/2017/04/18/user-generated-forms-with-wtforms/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2017/04/18/user-generated-forms-with-wtforms/</guid>
      <description>As part of my past work with the Office for National Statistics (ONS), I worked with the survey runner team to add additional features to their Electronic Questionnaire which enabled the business to take regular surveys electronically via the web. During my final months there, I took it upon myself to tackle what was seen to be one of the projects major pieces of technical debt, its use of a custom form renderer.</description>
    </item>
    
    <item>
      <title>Processing Camera RAWs with OpenImageIO and Python</title>
      <link>https://www.ianwootten.co.uk/2014/09/15/processing-camera-raws-with-openimageio-and-python/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2014/09/15/processing-camera-raws-with-openimageio-and-python/</guid>
      <description>I recently discovered the library OpenImageIO, an awesome tool for reading and writing image files. What makes this of particular interest is the sheer variety of image files supported (BMP, Cineon, JPG, JPG-2000, GIF, DPX, OpenEXR, Targa, TIFF) (as well as variety of camera raw formats) and the fact it can perform image transformations upon them very easily. Given it&amp;rsquo;s designed for use in media and VFX environments it sounds like it will be useful for the type of work I&amp;rsquo;ve previously been involved with in stop motion.</description>
    </item>
    
    <item>
      <title>Splitting a date range in Python</title>
      <link>https://www.ianwootten.co.uk/2014/07/01/splitting-a-date-range-in-python/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2014/07/01/splitting-a-date-range-in-python/</guid>
      <description>Dates are one of those annoying things that shouldn&amp;rsquo;t be, but are regularly difficult in web apps. I used the following two methods in a recent page to neatly break a date range into distinct segments as part of a analytics app I&amp;rsquo;m currently working on. Hopefully someone else will find them helpful.
import datetime, calendar # Find the delta between two dates based on a desired number of ranges def datedelta(startdate, enddate, no_of_ranges): start_epoch = calendar.</description>
    </item>
    
  </channel>
</rss>
