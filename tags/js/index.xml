<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on Ian Wootten</title>
    <link>https://www.ianwootten.co.uk/tags/js/</link>
    <description>Recent content in js on Ian Wootten</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 26 Jul 2022 10:24:00 +0000</lastBuildDate><atom:link href="https://www.ianwootten.co.uk/tags/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Set the Locale Used in Cypress Tests</title>
      <link>https://www.ianwootten.co.uk/2022/07/26/how-to-set-the-locale-used-in-cypress-tests/</link>
      <pubDate>Tue, 26 Jul 2022 10:24:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2022/07/26/how-to-set-the-locale-used-in-cypress-tests/</guid>
      <description>When running some Cypress tests in Github Actions that were inspecting dates recently, I wanted to be able to set the locale of the browser - specifically for Chrome which I was using with Cypress.
The tests checked the date format of dd/mm/yyyy and ran fine locally in my own locale of Great Britain, but when Github executed them they appeared in a mm/dd/yyyy format.
Originally, I’d thought this require a step within setting up the github action environment itself which set my linux box to have the appropriate locale, but this doesn’t change anything - presumably because the Cypress github action runs in a separate step.</description>
    </item>
    
    <item>
      <title>How to Pass Vue Route Params as Component Props</title>
      <link>https://www.ianwootten.co.uk/2022/06/09/how-to-pass-vue-route-params-as-component-props/</link>
      <pubDate>Thu, 09 Jun 2022 14:15:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2022/06/09/how-to-pass-vue-route-params-as-component-props/</guid>
      <description>If you’re using vues router to link to dynamic URLs you may get stuck wondering why your props on router-links aren’t being sent to your components. Vue’s router doesn’t support sending props directly. So you can’t do something like this:
&amp;lt;router-link class=&amp;#34;...&amp;#34; :to=&amp;#34;{ path: `/user/edit/`, id=id }&amp;#34; &amp;gt;Edit &amp;lt;/router-link&amp;gt; Here the id prop will never get passed in routers default configuration. Instead you need to configure each of your routes to pass the route params as props like so:</description>
    </item>
    
    <item>
      <title>Automatic Static Site Creation with Astro, Supabase and Netlify</title>
      <link>https://www.ianwootten.co.uk/2021/09/10/automatic-static-site-creation-with-astro-supabase-and-netlify/</link>
      <pubDate>Fri, 10 Sep 2021 10:27:51 +0100</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2021/09/10/automatic-static-site-creation-with-astro-supabase-and-netlify/</guid>
      <description>This week, I revealed mixes.it - a very simple site I&amp;rsquo;ve created for indexing DJ mixes scraped from the web. I wanted a no-frills site that I could get Spotify playlists of DJ&amp;rsquo;s I like to see what new music they were playing and that I didn&amp;rsquo;t have to spend much time supporting.
I used Astro and Supabase to create the site itself and the whole thing is currently built using Netlify.</description>
    </item>
    
    <item>
      <title>Creating Social Images with Puppeteer</title>
      <link>https://www.ianwootten.co.uk/2021/02/16/creating-social-images-with-puppeteer/</link>
      <pubDate>Tue, 16 Feb 2021 10:07:59 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2021/02/16/creating-social-images-with-puppeteer/</guid>
      <description>In this post I&amp;rsquo;m going to show how to generate images for sharing content on social networks like twitter and facebook using Puppeteer. This could be for any content - a post on our blog or something more complex like a dynamic storefront. So long as we correctly include open graph meta tags within the markup appropriate for the sites in question, our nicely designed image will be included as part of the apps feeds, rather than a blank preview.</description>
    </item>
    
    <item>
      <title>My Web Development Stack in 2018</title>
      <link>https://www.ianwootten.co.uk/2018/11/07/my-web-development-stack-in-2018/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2018/11/07/my-web-development-stack-in-2018/</guid>
      <description>Over my time as a web developer, I’ve jumped between many frameworks and languages, attempting to find ones that work well for me. This seems to be pretty typical for developers who always have a take on the latest trend, either to quickly adopt or criticise it.
I really wanted to be a member of the Ruby crew for a time and ended up buying multiple copies of “Agile Web Development with Rails”, before having the opportunity to really apply it to a project and disposing of them because the material was outdated.</description>
    </item>
    
    <item>
      <title>Why I Choose Popular Frameworks</title>
      <link>https://www.ianwootten.co.uk/2013/01/04/why-i-choose-popular-frameworks/</link>
      <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2013/01/04/why-i-choose-popular-frameworks/</guid>
      <description>I feel compelled to write this post so late in the day after clocking Tyler Renelle’s rant on github about his problems with the popularity of certain JS frameworks (in the main Backbone.js). After having written apps in a variety of JS frameworks (Backbone, Spine and Meteor), I’ve learned that the feature set of a framework is not the only thing I hold dear when making a choice between them.</description>
    </item>
    
    <item>
      <title>Oh Crap, I&#39;m a Frontend Developer</title>
      <link>https://www.ianwootten.co.uk/2012/11/23/oh-crap-im-a-frontend-developer/</link>
      <pubDate>Fri, 23 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.ianwootten.co.uk/2012/11/23/oh-crap-im-a-frontend-developer/</guid>
      <description>When I was first tiptoeing in the waters of web development (early 2000′s), getting a grips on job descriptions was simple. There were 2 types of people in our industry: designers or developers. You either drew websites, or you built websites – that was it.
As time went on people seemed to invent new titles: “UX Designers” were the first to appear on the scene to me, and we’re still to this day figuring out what this role really entails.</description>
    </item>
    
  </channel>
</rss>
