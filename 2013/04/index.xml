<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2013/04 on Ian Wootten</title><link>https://www.ianwootten.co.uk/2013/04/</link><description>Recent content in 2013/04 on Ian Wootten</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://www.ianwootten.co.uk/2013/04/index.xml" rel="self" type="application/rss+xml"/><item><title>The Problem with Full Stack JS Applications</title><link>https://www.ianwootten.co.uk/2013/04/03/the-problem-with-full-stack-js-applications/</link><pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate><guid>https://www.ianwootten.co.uk/2013/04/03/the-problem-with-full-stack-js-applications/</guid><description>Whilst node.js heralded an era of being able to use a single language for both server and client side development, nobody mentioned the confusion such an approach could cause. It’s inevitable that there’s going to be similarities in code that constructs data on the server and that which presents it on the client. The fact that the two are written in the same language and the structure of them is so tightly coupled can make it easy to lose track of where you are and what you’re doing when knee deep in code.</description></item></channel></rss>